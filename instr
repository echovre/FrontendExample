Back End Take Home Exercise
Overview
--------
Implement a small api for interacting with a callback based third-party
service.
Requirements
------------
Implement an application that can be used as an intermediary for a third-party service.
The third party service accepts a document request payload which includes a callback url
and will respond to that url when the document is ready, which may be up to 10 business
days later.
Your application is expected to have four endpoints. These may be implemented as a stateful
service, or multiple stateless services/functions connected to a store. The state must
be stored somewhere (if in memory, please note how to store at rest). Each should respond
to an http request and follow the REST conventions for methods. The endpoints should meet
the following requirements:
1. POST a request
POST /request
BODY: Object {
"body": String
}
RETURNS String
This should accept a JSON body consisting of a one key, "body", which is a string. Doing
this should initiate a request to the third-party service. It will also create a unique
identifier for this request we can later reference.
The request to the third party service should be a stubbed out, to call
`http://example.com/request" with the following payload:BODY Object: {
"body": {body},
"callback": "/callback/{id}"
}
Comments or other indicators on how you would actually call this service are recommended, as
well as any additional concerns around error handling/logging.
2. POST callback
POST /callback/{id}
BODY String
RETURNS 204
This URL should be sent in the original request. Afterward, the service will send an
initial POST with the text string `STARTED` to indicate it's they received the request.
3. PUT callback
PUT /callback/{id}
BODY Object {
"status": String,
"detail": String
}
RETURNS 204
At some later date, it will PUT status updates to this callback URL, each which will have
a json object with the keys of `status` and `detail`. The status will be one of `PROCESSED`,
`COMPLETED` or `ERROR`. The detail will be a text string.
4. GET status
GET /status/{id}
RETURNS Object {
"status": String,
"detail": String,
"body": String
}
Finally, given the unique ID, we should be able to get the status of the request
from our application. It will give us the status, detail and original body, as well as timestamps
for when it was created and when the latest update occurred.
Technologies
------------
We encourage you to use those technologies you are most comfortable with. However, theprimary tools you'll be expected to use at this job are Java and the AWS
technology stack (including SQL). Displaying familiarity with these
is useful and encouraged. Solutions that stray too far will not be considered.
Questions
---------
If you have any questions on the task presented here, we encourage you to reach out to
you representative and we will strive to get you answers in a timely fashion.
Thank you for your interest and taking the time to complete this. We know your time is
valuable and we hope this experience helps both sides get a sense of the other in a
quicker, more efficient manner.


Overview
--------
Implement a small browser-based application for pre-approving an investor
for a potential investment in a financial vehicle.
Requirements
------------
Your application should lead a user through the initial portion of qualifying
for an investment. It should consist of a landing page to collect basic info
about both the investment they are interested in investing in and their own financial
situation. Based on this, you should be able to make a simulated network call
that will redirect the user to either a new account creation page or a
disqualification notice.
The styling should be simple, plain but deliberate.
* Landing Page
The initial page should show a simple form with inputs for the following field:
Investment Amount (Currency)
Investment Type (Text) eg. “Bond”, “Stocks”, “Real Estate” etc...
Total Net Worth (Currency)
User Estimated Yearly Income (Currency)
User Estimated Credit Score (Number from 300-850)
These fields are all required and should validate to type. Provide feedback to the
user when they are incorrect or missing information. There should be space for marketing copy
(Lorum Ipsem) and controls for moving forward.
* New Account Page
If the api call does not return a disqualification message(see below), this page
should have a simple account creation form including:
Username (Text)
Password (Text)The username should be validated as an email and password should require more than 8
characters and a number or special character. Ensure the user types their password
twice to validate their intent.
* Disqualification Page
Display a simple page with the disqualification message that comes from
the api call as well as fake information to get in contact with a customer service.
There should be no further way to get off this page or re-enter the information.
* API call
You should implement a mock fetch call for your backend communication. This call should
have the same interface as the real fetch and return a promise wrapped response object.
The response should return disqualify message (Lorum Ipsem is fine) if the Investment Amount
is more than 1/5th of their Yearly Income, or their Estimated Credit is below 600, or their
Investment a=Amount is more than 3% of their Total Net Worth. Otherwise it
should return a positive qualification flag. A `Bad Request` response should be returned
for any Investment Amount above $9,000,000.
Technologies
------------
We encourage you to use those technologies you are most comfortable with. However, the
primary tools you'll be expected to use at this job are modern React/Redux.
Displaying familiarity with these is useful and encouraged. Solutions that stray too far
will not be considered.
Questions
---------
If you have any questions on the task presented here, we encourage you to reach out to
you representative and we will strive to get you answers in a timely fashion.
Thank you for your interest and taking the time to complete this. We know your time is
valuable and we hope this experience helps both sides get a sense of the other in a
quicker, more efficient manner.
